{"ast":null,"code":"var _jsxFileName = \"/Users/hutchski/GA-SEI/unit_4/week_12/Striva/client/src/containers/FeedContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Switch, Route, Link, useHistory } from 'react-router-dom'; // import services stuffs\n\nimport { getAllPosts, postPost, putPost } from '../services/posts'; // import screens\n\nimport AllPosts from '../screens/AllPosts';\nimport PostDetail from '../screens/PostDetail';\nimport CreatePost from '../screens/CreatePost';\nimport EditPost from '../screens/EditPost';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FeedContainer() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const postData = await getAllPosts();\n      setPosts(postData);\n    };\n\n    fetchPosts();\n  }, []);\n\n  const handleCreate = async postData => {\n    const newPost = await postPost(postData);\n    setPosts(prevState => [...prevState, newPost]);\n    history.push('/posts');\n  };\n\n  const handleUpdate = async (id, postData) => {\n    const updatedPost = await putPost(id, postData);\n    setPosts(prevState => prevState.map(post => {\n      return post.id === Number(id) ? updatedPost : post;\n    }));\n    history.push('/posts');\n  };\n\n  const handleDelete = async id => {\n    await destroyPost(id);\n    setPosts(prevState => prevState.filter(post => post.id !== id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/posts/new\",\n      children: /*#__PURE__*/_jsxDEV(CreatePost, {\n        handleCreate: handleCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/posts/:id/edit\",\n      children: /*#__PURE__*/_jsxDEV(EditPost, {\n        posts: posts,\n        handleUpdate: handleUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/posts/:id\",\n      children: /*#__PURE__*/_jsxDEV(PostDetail, {\n        handleDelete: handleDelete,\n        posts: posts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      children: /*#__PURE__*/_jsxDEV(AllPosts, {\n        posts: posts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FeedContainer, \"LMnqXJ5SNk+GlN1YCaRjc/7UFkI=\", false, function () {\n  return [useHistory];\n});\n\n_c = FeedContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedContainer\");","map":{"version":3,"sources":["/Users/hutchski/GA-SEI/unit_4/week_12/Striva/client/src/containers/FeedContainer.jsx"],"names":["useState","useEffect","Switch","Route","Link","useHistory","getAllPosts","postPost","putPost","AllPosts","PostDetail","CreatePost","EditPost","FeedContainer","posts","setPosts","history","fetchPosts","postData","handleCreate","newPost","prevState","push","handleUpdate","id","updatedPost","map","post","Number","handleDelete","destroyPost","filter"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Switch, Route, Link, useHistory } from 'react-router-dom';\n\n// import services stuffs\nimport {getAllPosts, postPost, putPost} from '../services/posts'\n\n// import screens\nimport AllPosts from '../screens/AllPosts';\nimport PostDetail from '../screens/PostDetail'\nimport CreatePost from '../screens/CreatePost'\nimport EditPost from '../screens/EditPost'\n\nexport default function FeedContainer() {\n  const [posts, setPosts] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const postData = await getAllPosts();\n      setPosts(postData);\n    }\n    fetchPosts();\n  }, [])\n\n  const handleCreate = async (postData) => {\n    const newPost = await postPost(postData);\n    setPosts(prevState => [...prevState, newPost]);\n    history.push('/posts');\n  }\n\n  const handleUpdate = async (id, postData) => {\n    const updatedPost = await putPost(id, postData);\n    setPosts(prevState => prevState.map(post => {\n      return post.id === Number(id) ? updatedPost : post\n    }))\n    history.push('/posts');\n  }\n\n  const handleDelete = async (id) => {\n    await destroyPost(id);\n    setPosts(prevState => prevState.filter(post => post.id !== id))\n  }\n\n  return (\n    <Switch>\n      <Route path='/posts/new'>\n        <CreatePost\n          handleCreate={handleCreate}\n        />\n        </Route>\n      <Route path='/posts/:id/edit'>\n        <EditPost\n          posts={posts}\n          handleUpdate={handleUpdate}\n        />\n      </Route>\n      <Route path='/posts/:id'>\n        <PostDetail\n          handleDelete={handleDelete}\n          posts={posts}\n        />\n      </Route>\n\n\n      \n        \n      \n      <Route path='/'>\n        <AllPosts\n          posts={posts}\n        />\n      </Route>\n\n    </Switch>\n  )\n}"]},"metadata":{},"sourceType":"module"}